@model IEnumerable<MapRover.Models.Airport>
<script src="https://maps.googleapis.com/maps/api/js?sensor=false"></script>
 <script src="Scripts/markerclusterer.js" type="text/javascript"></script>
<script>
    /*var map = null;*/

    google.maps.event.addDomListener(window, 'load', initialize);
    var map;
    var markers = [];
    var infoWindow = new google.maps.InfoWindow();   
    var cities = {};
    var airports = {};
    var autoHideFutureMarkers = false;

    function initialize() {
        var mapOptions = {            
            zoom: 4,
            center: new google.maps.LatLng(51.333333, 12.383333),
            mapTypeId: google.maps.MapTypeId.ROADMAP,
            mapTypeControl: true,
            mapTypeControlOptions: {
            style: google.maps.MapTypeControlStyle.DROPDOWN_MENU
        },
            navigationControl: true,
            navigationControlOptions: {
            style: google.maps.NavigationControlStyle.SMALL
        }
        };
        map = new google.maps.Map(document.getElementById('map_canvas'), mapOptions);

        var mcOptions = { gridSize: 40, maxZoom: 15 };
        
            
        @foreach (var airport in Model)
	    {
            var culture = System.Globalization.CultureInfo.InvariantCulture;
            <text>
        var marker = createMarker('@airport.Name', @airport.Lat.ToString(culture), @airport.Lng.ToString(culture));        
        storeMarkerForCity(marker, '@airport.CityId', '@airport.AirportId');
        storeMarkerForAirport(marker, '@airport.AirportId');
            </text>
	    }

        var mc = new MarkerClusterer(map, markers, mcOptions);
    }
  
    function createMarker(title, lat, lng) {
        var image = "Content/themes/base/images/airport2.png";

        // Creating a marker and putting it on the map
        var marker = new google.maps.Marker({
            position: new google.maps.LatLng(lat, lng),
            icon: image,
            map: map,
            title: title

        });
        markers.push(marker);

        if (autoHideFutureMarkers)
            marker.setVisible(false);

        //Attaching a click event to the current marker
        google.maps.event.addListener(marker, "click", function (e) {
            infoWindow.setContent(title);
            infoWindow.open(map, marker);
        });

        return marker;
    }

    function storeMarkerForCity(marker, city) {
        if (cities[city] == null)
            cities[city] = [];

        if (cities[city].indexOf(marker) < 0)
            cities[city].push(marker);
    }

    function storeMarkerForAirport(marker, airport) {
        airports[airport] = marker;
    }

    function showMarkerForAirport(airport) {
        switchMarkerVisibleForAirport(airport, true);
    }

    function hideMarkerForAirport(airport) {
        switchMarkerVisibleForAirport(airport, false);
    }

    function switchMarkerVisibleForAirport(airport, visible) {
        var marker = airports[airport];

        if (marker != null)
            marker.setVisible(visible);
    }

    function showMarkersForCity(city) {
        switchMarkersVisibleForCity(city, true);
    }

    function hideMarkersForCity(city) {
        switchMarkersVisibleForCity(city, false);
    }

    function switchMarkersVisibleForCity(city, visible) {
        var airportMarkers = cities[city];

        if (airportMarkers != null) {
            airportMarkers.forEach(function (marker) { marker.setVisible(visible); });
        }
    }

    function hideAllMarkers() {
        markers.forEach(function (marker) { marker.setVisible(false); });  
    }

 
 </script>
 <div id="map_canvas" style="width:100%; height:500px"></div> 