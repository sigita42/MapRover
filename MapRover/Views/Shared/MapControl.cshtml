@model IEnumerable<MapRover.Models.Airport>
<script src="https://maps.googleapis.com/maps/api/js?sensor=true"></script>
<script src="Scripts/markerclusterer.js" type="text/javascript"></script>
<script>
    /*var map = null;*/

    google.maps.event.addDomListener(window, 'load', initialize);
    var map;
    var markers = [];
    var infoWindow = new google.maps.InfoWindow();
    var cityMarkers = {};
    var airports = {};
    var autoHideFutureMarkers = false;
    var airportCircle;
    var initialLocation;
    var siberia = new google.maps.LatLng(60, 105);
    var newyork = new google.maps.LatLng(40.69847032728747, -73.9514422416687);
    var browserSupportFlag =  new Boolean();

    function initialize() {
        var mapOptions = {
            zoom: 4,
            //center: new google.maps.LatLng(51.333333, 12.383333),
            mapTypeId: google.maps.MapTypeId.ROADMAP,
            mapTypeControl: true,
            mapTypeControlOptions: {
                style: google.maps.MapTypeControlStyle.DROPDOWN_MENU
            },
            navigationControl: true,
            navigationControlOptions: {
                style: google.maps.NavigationControlStyle.SMALL
            }
        };
        map = new google.maps.Map(document.getElementById('map_canvas'), mapOptions);

        // Try W3C Geolocation (Preferred)
        if(navigator.geolocation) {
            browserSupportFlag = true;
            navigator.geolocation.getCurrentPosition(function(position) {
                initialLocation = new google.maps.LatLng(position.coords.latitude,position.coords.longitude);
                map.setCenter(initialLocation);
            }, function() {
                handleNoGeolocation(browserSupportFlag);
            });
        }
            // Browser doesn't support Geolocation
        else {
            browserSupportFlag = false;
            handleNoGeolocation(browserSupportFlag);
        }
  
        function handleNoGeolocation(errorFlag) {
            if (errorFlag == true) {
                alert("Geolocation service failed.");
                initialLocation = newyork;
            } else {
                alert("Your browser doesn't support geolocation. We've placed you in Siberia.");
                initialLocation = siberia;
            }
            map.setCenter(initialLocation);
        }
           


        var mcOptions = { gridSize: 40, maxZoom: 15 };
        var marker;

        @foreach (var airport in Model)
        {
            var culture = System.Globalization.CultureInfo.InvariantCulture;
            <text>
        marker = createMarker('@airport.Name', @airport.Lat.ToString(culture), @airport.Lng.ToString(culture), @airport.CityId);
        storeMarkerForCity(marker, '@airport.CityId', '@airport.AirportId');
        storeMarkerForAirport(marker, '@airport.AirportId');

       var passengersOptions = {
            strokeColor: "#FF0000",
            strokeOpacity: 0.8,
            strokeWeight: 1,
            fillColor: "#FF0000",
            fillOpacity: 0.1,
            map: map,
            center: marker.position,
            radius: '@airport.Passengers'/250
        };
        airportCircle = new google.maps.Circle(passengersOptions);
            </text>
        }

        var mc = new MarkerClusterer(map, markers, mcOptions);
    }

    function createMarker(title, lat, lng, city) {
        var image = "Content/themes/base/images/airport8.png";

        // Creating a marker and putting it on the map
        var marker = new google.maps.Marker({
            position: new google.maps.LatLng(lat, lng),
            icon: image,
            map: map,
            title: title

        });
        markers.push(marker);

        if (autoHideFutureMarkers)
            marker.setVisible(false);

        //Attaching a click event to the current marker
        google.maps.event.addListener(marker, "click", function (e) {
            infoWindow.setContent(title);
            infoWindow.open(map, marker);
            if (typeof(displayAdditionalInfoForCity) == 'function')
                displayAdditionalInfoForCity(city);
        });

        return marker;
    }

    function storeMarkerForCity(marker, city) {
        if (cityMarkers[city] == null)
            cityMarkers[city] = [];

        if (cityMarkers[city].indexOf(marker) < 0)
            cityMarkers[city].push(marker);
    }

    function storeMarkerForAirport(marker, airport) {
        airports[airport] = marker;
    }

    function showMarkerForAirport(airport) {
        switchMarkerVisibleForAirport(airport, true);
    }

    function hideMarkerForAirport(airport) {
        switchMarkerVisibleForAirport(airport, false);
    }

    function switchMarkerVisibleForAirport(airport, visible) {
        var marker = airports[airport];

        if (marker != null)
            marker.setVisible(visible);
    }

    function showMarkersForCity(city) {
        switchMarkersVisibleForCity(city, true);
    }

    function hideMarkersForCity(city) {
        switchMarkersVisibleForCity(city, false);
    }

    function switchMarkersVisibleForCity(city, visible) {
        var airportMarkers = cityMarkers[city];

        if (airportMarkers != null) {
            airportMarkers.forEach(function (marker) { marker.setVisible(visible); });
        }
    }

    function hideAllMarkers() {
        markers.forEach(function (marker) { marker.setVisible(false); });
    }
</script>
<div id="map_canvas" style="width: 100%; height: 500px"></div>